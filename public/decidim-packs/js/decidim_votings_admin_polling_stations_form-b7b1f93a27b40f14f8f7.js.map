{"version":3,"file":"js/decidim_votings_admin_polling_stations_form-b7b1f93a27b40f14f8f7.js","mappings":"yBAOe,SAASA,EAAuBC,EAAYC,EAAQC,GACjE,IAAMC,EAAG,UAAMH,EAAU,QACzB,GAAIE,EAAQC,GACV,OAAOD,EAAQC,GAGjB,IAAMC,EAAYH,EAAOI,KAAK,QACxBC,EAAe,cACrB,OAAIF,EAAUG,MAAMD,GACXF,EAAUI,QAAQF,EAAa,IAAD,OAAMN,EAAU,MAGhDA,CACT,CCwCe,SAASS,EAAgBR,EAAQC,EAASQ,GACvD,IAAMC,EAAgBC,EAAEC,OAAO,CAAC,EAAGX,GAC7BY,EAAeb,EAAOI,KAAK,MAAMU,MAAM,KAC7CD,EAAaE,MAEb,IAAMC,EAAQ,UAAMH,EAAaI,KAAK,MAElCC,EAAe,WACfC,EAAgB,YAEhBnB,EAAOoB,OAAS,IAClBF,EAAepB,EAAuB,WAAYE,EAAQU,GAC1DS,EAAgBrB,EAAuB,YAAaE,EAAQU,IAG9D,IAAMW,EAASV,EAAEC,OAAO,CACtBU,WAAW,GAAD,OAAKN,EAAQ,aACvBO,YAAY,GAAD,OAAKP,EAAQ,cACxBE,aAAcA,EACdC,cAAeA,GACdlB,GACCuB,GAAW,EAuBTC,EAAiB,SAACC,IArBO,WAC7B,IAAIC,EAAYhB,EAAE,IAAD,OAAKU,EAAOC,aACzBK,EAAUP,OAAS,IACrBO,EAAYhB,EAAE,8BAAD,OAA+BU,EAAOH,aAAY,iBAASG,EAAOC,WAAU,SACzFtB,EAAO4B,MAAMD,IAGf,IAAIE,EAAalB,EAAE,IAAD,OAAKU,EAAOE,cAC1BM,EAAWT,OAAS,IACtBS,EAAalB,EAAE,8BAAD,OAA+BU,EAAOF,cAAa,iBAASE,EAAOE,YAAW,SAC5FvB,EAAO4B,MAAMC,GAEjB,CAUEC,GAEAnB,EAAE,IAAD,OAAKU,EAAOC,aAAcS,IAAIL,EAAY,IAAItB,KAAK,QAASsB,EAAY,IACzEf,EAAE,IAAD,OAAKU,EAAOE,cAAeQ,IAAIL,EAAY,IAAItB,KAAK,QAASsB,EAAY,GAC5E,EASA1B,EAAOgC,GAAG,kBAAkB,WArBtBR,IAIJb,EAAE,IAAD,OAAKU,EAAOC,aAAcS,IAAI,IAAIE,WAAW,SAC9CtB,EAAE,IAAD,OAAKU,EAAOE,cAAeQ,IAAI,IAAIE,WAAW,SAkBjD,IAIAjC,EAAOgC,GAAG,wCAAwC,SAACE,EAAKR,GACtDD,EAAeC,GACfF,GAAW,EACXf,EAASiB,EACX,IAGA,IAAMA,EAAc,UAAG1B,EAAOmC,KAAK,gBAAiBrB,MAAM,KAAKsB,IAAIC,YAC/DC,MAAMC,QAAQb,IAAuC,IAAvBA,EAAYN,QAC5CK,EAAeC,EAEnB,CCrIAf,GAAE,WAEAH,EADcG,EAAE,+CACM6B,KAAK,4BAC7B,G","sources":["webpack://decidim-development-app/../decidim-core/app/packs/src/decidim/geocoding/coordinate_input.js","webpack://decidim-development-app/../decidim-core/app/packs/src/decidim/geocoding/attach_input.js","webpack://decidim-development-app/../decidim-elections/app/packs/src/decidim/votings/admin/polling_stations_form.js"],"sourcesContent":["/**\n * Get coordinate input name from a given $input\n * @param {string} coordinate - Allows to find 'latitude' or 'longitude' field.\n * @param {jQuery} $input - Address input field\n * @param {Object} options (optional) - Extra options\n * @returns {string} - Returns input name\n */\nexport default function getCoordinateInputName(coordinate, $input, options) {\n  const key = `${coordinate}Name`;\n  if (options[key]) {\n    return options[key];\n  }\n\n  const inputName = $input.attr(\"name\");\n  const subNameMatch = /\\[[^\\]]+\\]$/;\n  if (inputName.match(subNameMatch)) {\n    return inputName.replace(subNameMatch, `[${coordinate}]`);\n  }\n\n  return coordinate;\n}\n","/* eslint-disable require-jsdoc */\nimport getCoordinateInputName from \"./coordinate_input\"\n\n/**\n * You can use this method to \"attach\" front-end geocoding to any forms in the\n * front-end which have address fields with geocoding autocompletion\n * functionality already applied to them.\n *\n * To learn more about the front-end geocoding autocompletion, please refer to\n * the maps documentation at: /docs/customization/maps.md.\n *\n * When the geocoding autocompletion finishes, most of the times, its results\n * will also contain the geocoordinate information for the selected address.\n * This method allows you to pass these coordinates (latitude and longitude)\n * to the same front-end form where the geocoding autocompletion address field\n * is located at (which is the $input you pass to this method). The latitude\n * and longitude coordinates will be added or \"attached\" to the form once the\n * user selects one of the suggested addresses.\n *\n * Therefore, if there was the following geocoding autocompletion field at\n * your form:\n *   <input\n *     id=\"record_address\"\n *     type=\"text\"\n *     name=\"record[address]\"\n *     data-decidim-geocoding=\"{&quot;url&quot;:&quot;https://photon.example.org/api/&quot;}\"\n *   />\n *\n * You would then \"attach\" the geocoding result coordinates to the same form\n * where this input is at as follows:\n *   $(document).ready(function() {\n *     window.Decidim.attachGeocoding($(\"#record_address\"));\n *   });\n *\n * Now, after the user selects one of the suggested geocoding autocompletion\n * addresses and the geocoding autocompletion API provides the coordinates in\n * the results, you would have the following fields automatically generated\n * to your form:\n *   <input id=\"record_address\" type=\"text\" name=\"record[address]\" value=\"Selected address, 00210, City\" ... />\n *   <input id=\"record_latitude\" type=\"hidden\" name=\"record[latitude]\" value=\"1.123\" />\n *   <input id=\"record_longitude\" type=\"hidden\" name=\"record[longitude]\" value=\"2.234\" />\n *\n * If you would not do the attachment, these hidden longitude and latitude\n * fields would not be generated and the geocoding would have to happen at the\n * server-side when the form is submitted. The problem with that approach\n * would be that the server-side address geocoding could potentially result in\n * different coordinates than what the user actually selected in the front-end\n * because the autocompletion API can return different coordinates than the\n * geocoding API. Another reason is to avoid unnecessary calls to the\n * geocoding API as the front-end geocoding suggestion already returned the\n * coordinate values we need.\n *\n * @param {jQuery} $input The input jQuery element for the geocoded address\n *   field.\n * @param {Object} options (optional) Extra options if you want to customize\n *   the latitude and longitude element IDs or names from the default.\n * @param {function} callback (optional) Callback to run when updating the coordinates values\n * @returns {void}\n */\n\nexport default function attachGeocoding($input, options, callback) {\n  const attachOptions = $.extend({}, options);\n  const inputIdParts = $input.attr(\"id\").split(\"_\");\n  inputIdParts.pop();\n\n  const idPrefix = `${inputIdParts.join(\"_\")}`;\n\n  let latitudeName = \"latitude\";\n  let longitudeName = \"longitude\";\n\n  if ($input.length > 0) {\n    latitudeName = getCoordinateInputName(\"latitude\", $input, attachOptions);\n    longitudeName = getCoordinateInputName(\"longitude\", $input, attachOptions);\n  }\n\n  const config = $.extend({\n    latitudeId: `${idPrefix}_latitude`,\n    longitudeId: `${idPrefix}_longitude`,\n    latitudeName: latitudeName,\n    longitudeName: longitudeName\n  }, options);\n  let geocoded = false;\n\n  const createCoordinateFields = () => {\n    let $latitude = $(`#${config.latitudeId}`);\n    if ($latitude.length < 1) {\n      $latitude = $(`<input type=\"hidden\" name=\"${config.latitudeName}\" id=\"${config.latitudeId}\" />`);\n      $input.after($latitude);\n    }\n\n    let $longitude = $(`#${config.longitudeId}`);\n    if ($longitude.length < 1) {\n      $longitude = $(`<input type=\"hidden\" name=\"${config.longitudeName}\" id=\"${config.longitudeId}\" />`);\n      $input.after($longitude);\n    }\n  }\n  const clearCoordinateFields = () => {\n    if (geocoded) {\n      return;\n    }\n\n    $(`#${config.latitudeId}`).val(\"\").removeAttr(\"value\");\n    $(`#${config.longitudeId}`).val(\"\").removeAttr(\"value\");\n  };\n  const setCoordinates = (coordinates) => {\n    createCoordinateFields();\n\n    $(`#${config.latitudeId}`).val(coordinates[0]).attr(\"value\", coordinates[0]);\n    $(`#${config.longitudeId}`).val(coordinates[1]).attr(\"value\", coordinates[1]);\n  }\n\n  // When the user changes the value of the coordinate field without selecting\n  // any of the geocoding autocomplete results, clear the current latitude and\n  // longitude values to let the backend do the geocoding. Once a geocoding\n  // autocomplete value has been selected, assume the user just wants to\n  // refine the address formatting without changing the location point value.\n  // If they want, they can still modify the point in the next step of the\n  // proposal creation/editing.\n  $input.on(\"change.decidim\", () => {\n    clearCoordinateFields();\n  });\n\n  // When we receive the geocoding event on the field, update the coordinate\n  // values.\n  $input.on(\"geocoder-suggest-coordinates.decidim\", (_ev, coordinates) => {\n    setCoordinates(coordinates);\n    geocoded = true;\n    callback(coordinates)\n  });\n\n  // Set the initial values if the field defines the coordinates\n  const coordinates = `${$input.data(\"coordinates\")}`.split(\",\").map(parseFloat);\n  if (Array.isArray(coordinates) && coordinates.length === 2) {\n    setCoordinates(coordinates);\n  }\n}\n","import attachGeocoding from \"src/decidim/geocoding/attach_input\"\n\n$(() => {\n  const $form = $(\".edit_polling_station, .new_polling_station\");\n  attachGeocoding($form.find(\"#polling_station_address\"));\n})\n"],"names":["getCoordinateInputName","coordinate","$input","options","key","inputName","attr","subNameMatch","match","replace","attachGeocoding","callback","attachOptions","$","extend","inputIdParts","split","pop","idPrefix","join","latitudeName","longitudeName","length","config","latitudeId","longitudeId","geocoded","setCoordinates","coordinates","$latitude","after","$longitude","createCoordinateFields","val","on","removeAttr","_ev","data","map","parseFloat","Array","isArray","find"],"sourceRoot":""}